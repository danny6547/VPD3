insertDNVGLIntoRaw: test          
# sortOnDateTime: test              
# updateAirDensity: test            
# updateBrakePower: test            
# updateDisplacement: test          
# updateExpectedSpeed: test         
# updateMassFuelOilConsumed: test   
# updateShaftPower: test            
# updateSpeedLoss: test             
# updateWindResistanceCorrection: test     
# updateWindResistanceRelative: test     
# updateAirResistance: test     
# updateTransProjAreaCurrent: test
# updateCorrectPower: test     
# updateWindResistanceCorrection: write   
# updateAirResistance: write     
# updateCorrectPower: write       
# updateAirDensity: write            
# updateBrakePower: write            
# updateDisplacement: write          
# updateExpectedSpeed: write         
# updateMassFuelOilConsumed: write   
# updateShaftPower: write            
# updateSpeedLoss: write        
ISO19030: test
ISO19030: write
# updateDeliveredPower: test
# updateDeliveredPower: write
# isShaftPowerAvailable: test
# isShaftPowerAvailable: write
# isBrakePowerAvailable: test
# isBrakePowerAvailable: write
# convertDNVGLRawToRawData: write
insertDNVGLIntoPerformance: test
insertDNVGLIntoPerformance: write
# updateExpectedSpeed: include conditions for admiralty formula
# updateExpectedSpeed: include conditions for admiralty formula, test
# updateExpectedSpeed: include conditions for admiralty formula, write
insertIntoSpeedPowerCoefficients: calculate R2 value and validate against ISO standard (0.8)
# updateAirResistanceNoWind: find coefficient in bin containing direction zero (create BinCentres Column in WindCoefficientDirection?)
createRawData: modify double precision to reflect real-world values
updateBrakePower: allow for multiple engines per IMO
bunkerDeliveryNote: make BDN_number unique. This will both ensure that no duplicates rows are added when adding notes from different ships, and that only one value can be indexed for raw data.
# updateLCVFuelOil: test
# updateLCVFuelOil: write
insertWithoutDuplicates: test
# insertWithoutDuplicates: write
# updateLCVFuelOil: rename to updateFromBunkerNote, include update of density value
# removeInvalidRecords: test for remove rows where: mfoc is zero,
# removeInvalidRecords: write
updateBrakePower: make compatible with arbitrary-frequency data
# removeFOCBelowMinimum: remove values of Mfoc below the minimum FOC of the SFOC reference curve.
# deleteWithReferenceConditions: test remove values corresponding to those failing the reference conditions in the standard.
# deleteWithReferenceConditions: write
# insertBunkerDeliveryNoteDNVGL: write
insertBunkerDeliveryNoteDNVGL: test

# filterSpeedPowerLookup: update displacement and trim filters for speed-power values
# filterSpeedPowerLookup: test
# filterSpeedPowerLookup: write
# vessels: column "Speed Power Source", where data was sourced from.
# updateExpectedSpeed: test for multiple-displacement power curves
# updateExpectedSpeed: write for multiple-displacement power curves
Vessels.Speed_Power_Source: what if file is moved? Generate ordered, protected, easily expandable dir structure.
# sensorRecalibration: create table for dates and nature of sensor recalibration (imo, sensor, description)
# filterPowerBelowMinimum: filter values of Delivered Power below the minimum power of the speed-power curve.
# filterPowerBelowMinimum: test
# filterPowerBelowMinimum: write
# normaliseFrequencies: update all columns by normalising frequencies based on formula 2.
# normaliseHigherFreq: average higher-freq data to a lower frequency
# normaliseHigherFreq: write
# normaliseHigherFreq: test
# normaliseLowerFreq: duplicate lower-freq data to a higher frequency
# normaliseLowerFreq: write
# normaliseLowerFreq: test
# updateChauvenetsCriteria: mark rows for filtering for non-angle variables.
# updateChauvenetCriteria: calculate mean and error of angles from formula I2.
# validteData: applies formulae in annex J
# validteData: test
# validteData: write
# validteData: update for standard error of angles calculations

Sensors: create table to store sensors and their accuracies
ISO19030Compliant: create table to store boolean indicating whether analysis was compliant with standard
checkSensorRequirements: insert value for column "Compliant" into table ISO19030Compliant based on comparison of values in Sensors and the requirements in the standard

# PerformanceData: rename to PerformanceDataDNVGL
PerformanceDataISO19030: create table for data processed from ISO19030
insertPerformanceDataISO19030: insert performance data derived from RawData into PerformanceDataISO19030

updatePI: calculate dd performance, in-service performance (out of scope of this project?)