insertDNVGLIntoRaw: test          
# sortOnDateTime: test              
# updateAirDensity: test            
# updateBrakePower: test            
# updateDisplacement: test          
# updateExpectedSpeed: test         
# updateMassFuelOilConsumed: test   
# updateShaftPower: test            
# updateSpeedLoss: test             
# updateWindResistanceCorrection: test     
# updateWindResistanceRelative: test     
# updateAirResistance: test     
# updateTransProjAreaCurrent: test
# updateCorrectPower: test     
# updateWindResistanceCorrection: write   
# updateAirResistance: write     
# updateCorrectPower: write       
# updateAirDensity: write            
# updateBrakePower: write            
# updateDisplacement: write          
# updateExpectedSpeed: write         
# updateMassFuelOilConsumed: write   
# updateShaftPower: write            
# updateSpeedLoss: write        
ISO19030: test
ISO19030: write
# updateDeliveredPower: test
# updateDeliveredPower: write
# isShaftPowerAvailable: test
# isShaftPowerAvailable: write
# isBrakePowerAvailable: test
# isBrakePowerAvailable: write
# convertDNVGLRawToRawData: write
insertDNVGLIntoPerformance: test
insertDNVGLIntoPerformance: write
updateExpectedSpeed: include conditions for admiralty formula
insertIntoSpeedPowerCoefficients: calculate R2 value and validate against ISO standard (0.8)
updateAirResistanceNoWind: find coefficient in bin CLOSEST to centred on zero (create BinCentres Column in WindCoefficientDirection?)
createRawData: modify double precision to reflect real-world values
updateBrakePower: allow for multiple engines per IMO
bunkerDeliveryNote: make BDN_number unique. This will both ensure that no duplicates rows are added when adding notes from different ships, and that only one value can be indexed for raw data.
# updateLCVFuelOil: test
# updateLCVFuelOil: write
insertWithoutDuplicates: test
# insertWithoutDuplicates: write
# updateLCVFuelOil: rename to updateFromBunkerNote, include update of density value
# removeInvalidRecords: test for remove rows where: mfoc is zero,
# removeInvalidRecords: write
updateBrakePower: make compatible with arbitrary-frequency data
removeFOCBelowMinimum: remove values of Mfoc below the minimum FOC of the SFOC reference curve.
deleteWithReferenceConditions: test remove values corresponding to those failing the reference conditions in the standard.
deleteWithReferenceConditions: write